<?xml version="1.0" encoding="iso-8859-1"?><harvard > <Course><Title>Computer Science 50. Introduction  to Computer Science I</Title><Number>4949</Number><Instructor>Michael D.  Smith</Instructor><Details>Half course (fall term). M., W., F., at 10. EXAM GROUP:  3</Details><Description>Introduction to the intellectual enterprises of computer science.  Algorithms: their design, specification, and analysis. Software development:  problem decomposition, abstraction, data structures, implementation, debugging,  testing. Architecture of computers: low-level data representation and  instruction processing. Computer systems: programming languages, compilers,  operating systems. Computers in the real world: networks, security and  cryptography, artifical intelligence, social issues. Laboratory exercises  include extensive programming in the C language and experimenting with and  analyzing software systems.</Description><Notes>No previous computer experience  required. This course, when taken for a letter grade, meets the Core area  requirement for Quantitative Reasoning.</Notes></Course><Course><Title>Computer Science  51. Introduction to Computer Science II</Title><Number>3411</Number><Instructor>Henry H. Leitner</Instructor><Details>Half course (spring term). Tu., Th., 1–2:30.  EXAM GROUP: 15, 16</Details><Description>Abstract models for computational processes and their  concrete realizations. Functional, imperative, object-oriented and event-driven  styles of programming. The structure, interpretation and compilation of  programming languages. State-space search, finite-state processes, formal logic,  and syntactic and semantic formalisms as examples of useful abstractions. The  engineering of complex software through procedural and data abstractions.  Laboratory exercises using LISP, C++, and Java.</Description><Prereqs>Computer  Science 50 or equivalent.</Prereqs></Course><Course><Title>*Computer Science  91r. Supervised Reading and Research</Title><Number>0361</Number><Instructor>Steven J. Gortler</Instructor><Details>Half course (fall term; repeated spring  term). Hours to be arranged.</Details><Description>Supervised individual study of advanced  topics in computer science. A student wishing to enroll in Computer Science 91r  must be accepted by a faculty member who will supervise the course work. A form  available from Pierce Hall 110, must be filled out and signed by the student and  faculty supervisor. Students writing theses may enroll in this course while  conducting thesis research and writing.</Description><Notes>At most two terms of  Computer Science 91r may be taken for academic credit. May not be taken  Pass/Fail. Students wishing more information about the range of suitable  projects or faculty supervisors should consult the Director of Undergraduate  Studies.</Notes></Course><Course><Title>*Computer Science  96. System Design Projects</Title><Number>7499 Enrollment:  Limited to 20.</Number><Instructor>Stuart M. Shieber and members of the Faculty</Instructor><Details>Half course (fall term). Tu., Th., 2:30–4. EXAM GROUP: 16,  17</Details><Description>Cooperative design, development, and testing of a sizable and  realistic computer network system. Students gain experience both in software  development and system lifecycle issues, and in the area of application. We  concentrate on mathematical modeling for prediction. The target application is  prediction of student enrollments based on historical data, as raised by the  recent discussions of preregistration. Students work in groups; both student  participation in the classroom and effective group cooperation outside the  classroom are stressed.</Description><Prereqs>Computer Science 51.</Prereqs></Course><Course><Title>[Computer Science 120.  Introduction to Cryptography]</Title><Number>5911</Number><Instructor>Salil P.  Vadhan</Instructor><Details>Half course (spring term). M., W., 1–2:30. EXAM GROUP: 6,  7</Details><Description>Algorithms to guarantee privacy and authenticity of data during  communication and computation. Rigorous proofs of security based on precise  definitions and assumptions. Topics may include one-way functions, private-key  and public-key encryption, digital signatures, pseudorandom generators,  higher-level protocols such as electronic cash, and the role of cryptography in  network and systems security.</Description><Notes>Expected to be given in 2004–05.</Notes><Prereqs>Computer Science 121 or Computer Science 124.</Prereqs></Course><Course><Title>Computer Science  121. Introduction to Formal Systems and Computation</Title><Number>0669</Number><Instructor>Harry R. Lewis</Instructor><Details>Half course (fall term). Tu., Th.,  10–11:30. EXAM GROUP: 12, 13</Details><Description>General introduction to formal systems and  the theory of computation. Elementary treatment of automata, formal languages,  computability, uncomputability, computational complexity, NP–completeness, and  mathematical logic.</Description></Course><Course><Title>Computer Science  124. Data Structures and Algorithms</Title><Number>5207</Number><Instructor>Michael D. Mitzenmacher</Instructor><Details>Half course (spring term). Tu., Th.,  11:30–1. EXAM GROUP: 13, 14</Details><Description>Design and analysis of efficient algorithms  and data structures. Algorithm design methods, graph algorithms, approximation  algorithms, and randomized algorithms are covered.</Description><Prereqs>Computer Science 51; some exposure to discrete applied mathematics, such as  Applied Mathematics 106 or 107 or Computer Science 121 or Statistics 110, is  helpful.</Prereqs></Course><Course><Title>Computer Science  127. Computational Geometry</Title><Number>7377</Number><Instructor>Craig  Gotsman (Technion, Israel Institute of Science)</Instructor><Details>Half course (fall  term). M., W., 1–2:30. EXAM GROUP: 6, 7</Details><Description>Basic techniques, data  structures, combinatorics, and algorithms for solving geometric problems.  Examples are convex hulls, Voronoi diagrams, point set, and polygon  triangulation. Range search, linear programming, and point location. Some  theoretical and programming exercises.</Description><Prereqs>Computer Science  124.</Prereqs></Course><Course><Title>Computer Science  141. Computing Hardware</Title><Number>4357</Number><Instructor>Woodward  Yang</Instructor><Details>Half course (fall term). M., W., 1–2:30, and a two-hour weekly  laboratory. EXAM GROUP: 6, 7</Details><Description>Introduction to the design, structure, and  operation of digital computers; logic circuits and digital electronics; computer  arithmetic; computer architecture; and machine language programming.  Consideration of the design interactions between hardware and software  systems.</Description><Prereqs>Computer Science 50.</Prereqs></Course><Course><Title>Computer Science  143. Computer Networks</Title><Number>6401</Number><Instructor>H. T. Kung</Instructor><Details>Half course (fall term). Tu., Th., 11:30–1. EXAM GROUP: 13,  14</Details><Description>Architecture, design, and performance of computer networks. Topics  include: the Internet protocols, local area networks, performance analysis,  queueing theory, congestion control, multicast, quality of service, and network  security. Programming exercises on protocol implementation.</Description><Prereqs>Computer Science 51.</Prereqs></Course><Course><Title>Computer Science  144r. Networks Design Projects</Title><Number>5415</Number><Instructor>H. T.  Kung and Marco Iansiti (Business School)</Instructor><Details>Half course (spring term).  M., W., 2:30–4. EXAM GROUP: 7, 8</Details><Description>Cooperative design and development of a  business model based on advanced business networking concepts in one of the  three areas: optical networking, wireless networking, and inter-enterprise  software applications. Students will work in 2- or 3-person teams. Student  assignments will include weekly homework sets, a project proposal, and project  reports and presentations. At the end of the class, all teams will defend their  approaches and results in front of the class and invited guests.</Description><Notes>Preference given to upper-class undergraduates or graduate students in  computer science or in business. Offered jointly with the Business School as  4560.</Notes><Prereqs>Computer Science 143 or equivalent experience.</Prereqs></Course><Course><Title>Computer Science  146. Computer Architecture</Title><Number>6520</Number><Instructor>David M.  Brooks</Instructor><Details>Half course (spring term). M., W., 1–2:30. EXAM GROUP: 6,  7</Details><Description>Review of fundamental structures in modern microprocessor and computer  system architecture design. Topics include computer organization, instruction  set design, memory system design, pipelining, and other techniques to exploit  parallelism. System level topics include storage subsystems and basics of  multiprocessor systems. Emphasis on quantitative evaluation of design  alternatives while considering design metrics such as performance and power  dissipation.</Description><Prereqs>Computer Science 141.</Prereqs></Course><Course><Title>Computer Science  148. Design of VLSI Circuits and Systems</Title><Number>1772  Enrollment: Limited to 16.</Number><Instructor>Gu-Yeon Wei</Instructor><Details>Half course (spring  term). Tu., Th., 11:30–1. EXAM GROUP: 13, 14</Details><Description>Presentation of concepts and  techniques for the design and fabrication of VLSI systems and digital MOS  integrated circuits. Topics include: basic semiconductor theory; MOS transistors  and digital MOS circuits design; synchronous machines, clocking, and timing  issues; high-level description and modeling of VLSI systems; synthesis and place  and route design flows; and testing of VLSI circuits and systems. Various CAD  tools for design, simulation, and verification are extensively  used.</Description><Prereqs>Computer Science 141 or permission of  instructor.</Prereqs></Course><Course><Title>Computer Science  152. Principles of Programming Languages</Title><Number>6841</Number><Instructor>Norman Ramsey</Instructor><Details>Half course (spring term). M., W., F., at 11.  EXAM GROUP: 4</Details><Description>Intellectual tools needed to design, evaluate, and choose  programming languages. Historical influences on language design. Case studies,  reinforced by programming exercises. Advanced languages, abstraction mechanisms.  Includes functional, object-oriented, and logic paradigms. Focuses on practice,  but covers formal topics crucial for intellectual rigor: abstract syntax, lambda  calculus, type systems, and dynamic semantics. Grounding sufficient to read  professional literature.</Description><Prereqs>Computer Science 121. Students  must have excellent programming skills, be comfortable with recursion, basic  mathematical ideas and notations.</Prereqs></Course><Course><Title>Computer Science  153. Principles of Programming Language Compilation</Title><Number>2842</Number><Instructor>Michael D. Smith</Instructor><Details>Half course (spring term). M.,  W., F., at 10. EXAM GROUP: 3</Details><Description>Implementation of efficient interpreters and  compilers for programming languages. Associated algorithms and pragmatic issues.  Emphasizes practical applications including those outside of programming  languages proper. Also shows relationships to programming-language theory and  design. Participants build a working compiler including lexical analysis,  parsing, type checking, code generation, and register allocation. Exposure to  run-time issues and optimization.</Description><Prereqs>Computer Science  51.</Prereqs></Course><Course><Title>Computer Science  161. Operating Systems</Title><Number>4347</Number><Instructor>Matthew D.  Welsh</Instructor><Details>Half course (spring term). Tu., Th., 1–2:30. EXAM GROUP: 15,  16</Details><Description>The fundamental principles of resource management and abstraction in  modern operating systems. Control abstractions: threads, processes, scheduling,  synchronization. Storage abstractions: dynamic memory allocation, virtual  memory, file system design. Communication abstractions: interprocess  communication, networking. Case studies. Design and implementation of parts of a  multiuser multitasking virtual-memory operating system.</Description><Prereqs>Computer Science 51.</Prereqs></Course><Course><Title>Computer Science  175. Computer Graphics</Title><Number>3771</Number><Instructor>Steven J.  Gortler</Instructor><Details>Half course (fall term). M., W., 4–5:30. EXAM GROUP:  9</Details><Description>The computational aspects of computer graphics. Two major themes are  image rendering (viewing transformations, clipping, visible-surface processing,  raster algorithms, reflection models, lighting models, surface shading,  antialiasing, ray tracing, radiosity, and volume rendering) and scene modeling  (modeling transformations, curves and surfaces, texture mapping,  data-amplification techniques, constructive solid geometry, scalar- and  vector-field data, and animation). Ancillary topics include color compression,  image compression, image compositing, graphical user interfaces, and special  machine architectures for computer graphics.</Description><Prereqs>Computer  Science 51, Applied Mathematics 21b or Mathematics 21b.</Prereqs></Course><Course><Title>Computer Science  181. Intelligent Machines: Perception, Learning, and  Uncertainty</Title><Number>6454</Number><Instructor>Avrom J. Pfeffer</Instructor><Details>Half course (spring term). M., W., 2:30–4. EXAM GROUP: 7,  8</Details><Description>Introduction to artificial intelligence, focusing on problems of  perception, machine learning and reasoning under uncertainty. Supervised  learning algorithms. Neural networks and applications to character recognition.  Statistical pattern recognition. Bayesian networks: representation, inference  and learning. Hidden Markov models and applications to speech recognition.  Markov decision processes and reinforcement learning.</Description><Prereqs>Computer Science 51 and Computer Science 121. Statistics 110 is  recommended.</Prereqs></Course><Course><Title>Computer Science  182. Intelligent Machines: Reasoning, Actions, and Plans</Title><Number>0134</Number><Instructor>David C. Parkes</Instructor><Details>Half course (fall term). M., W.,  2:30–4. EXAM GROUP: 7, 8</Details><Description>Introduction to AI, focused on problems in  reasoning about action and rational decision making. Search: constraint  satisfaction; informed search and optimization; game playing. Knowledge  representation and logical inference. Planning: representation, search and  heuristics. Bounded rationality, situated agents. Multiagent systems. Discussion  of relevant work in philosophy, economics, and decision theory. Applications to  scheduling, robotics and e-commerce.</Description><Prereqs>Computer Science  51; Computer Science 121 (may be taken concurrently).</Prereqs></Course><Course><Title>Computer Science  187. Computational Linguistics</Title><Number>0249</Number><Instructor>Stuart M. Shieber</Instructor><Details>Half course (spring term). Tu., Th.,  10–11:30. EXAM GROUP: 12, 13</Details><Description>Introduction to computational linguistics,  the study of human language using the tools and techniques of computer science,  with applications to a variety of natural-language-processing problems.  Representing syntactic structure: context-free, augmented context-free, and  trans-context-free grammars. Representing semantic structure: first-order and  higher-order logics. Computing with syntactic and semantic representations:  Prolog programming; parsing and generation algorithms. Low-level language  processing with finite-state methods.</Description><Prereqs>Computer Science  121.</Prereqs></Course><Course><Title>[Computer Science 220r.  Cryptography: Trust and Adversity]</Title><Number>1637</Number><Instructor>Michael O. Rabin</Instructor><Details>Half course (fall term). Tu., Th., 11:30–1.  EXAM GROUP: 13, 14</Details><Description>Topics in modern cryptography. Primality testing,  finite fields, elliptic curves. Protocols: Public-key encryptions, digital  signatures, key exchanges, zero-knowledge proofs, authentication oblivious  transfer, secret sharing, proactive security, fair contract signing, distributed  agreements. Foundations: Probablistic encryption and semantic security. Attacks  and countermeasures: Non-malleability, plaintext awareness and proofs of  plaintext knowledge. Absolutely secure encryptions. Prerequisites will be  discussed in sections.</Description><Notes>Expected to be given in 2004–05.</Notes></Course><Course><Title>Computer Science  221. Computational Complexity</Title><Number>5812</Number><Instructor>Leslie  G. Valiant</Instructor><Details>Half course (spring term). Tu., Th., 2:30–4. EXAM GROUP:  16, 17</Details><Description>A quantitative theory of the resources needed for computing and  the impediments to efficient computation. The models of computation considered  include ones that are finite or infinite, deterministic, randomized, quantum or  nondeterministic, discrete or algebraic, sequential or  parallel.</Description><Prereqs>Computer Science 121 or equivalent.</Prereqs></Course><Course><Title>Computer Science  222. Algorithms at the Ends of the Wire</Title><Number>2493</Number><Instructor>Michael D. Mitzenmacher</Instructor><Details>Half course (fall term). Tu., Th.,  1–2:30. EXAM GROUP: 15, 16</Details><Description>Covers topics related to algorithms for big  data, especially related to networks. Themes include compression, cryptography,  coding, and information retrieval related to the World Wide Web. Requires a  major final project.</Description><Prereqs>Computer Science 124.</Prereqs></Course><Course><Title>[Computer Science 223. Probabilistic Analysis and  Algorithms]</Title><Number>4740</Number><Instructor>Michael D. Mitzenmacher</Instructor><Details>Half course (fall term). Tu., Th., 2:30–4. EXAM GROUP: 16,  17</Details><Description>Probabilistic techniques and tools for the design and analysis of  algorithms. Reading of current research in the area will be  required.</Description><Notes>Expected to be given in 2004–05.</Notes><Prereqs>Computer Science 124. Preferably additional probability, such as in Computer  Science 226r, Statistics 110, or Mathematics 191.</Prereqs></Course><Course><Title>Computer Science  224r. Randomness in Computation</Title><Number>3380</Number><Instructor>Michael O. Rabin</Instructor><Details>Half course (fall term). Tu., Th., 11:30–1.  EXAM GROUP: 13, 14</Details><Description>The surprising efficacy of randomization in the  solution of algorithmic and computer science problems. Applications include  number theory, cryptography, finite fields, computational geometry, routing,  parallel algorithms, pattern matching, distributed systems, self-checking  programs, probabilistically checkable proofs.</Description></Course><Course><Title>Computer Science  225. Pseudorandomness</Title><Number>4869</Number><Instructor>Salil P.  Vadhan</Instructor><Details>Half course (spring term). Tu., Th., 1–2:30. EXAM GROUP: 15,  16</Details><Description>Efficiently generating objects that “look random” despite being  constructed using little or no randomness. Connections and applications to  computational complexity, cryptography, and combinatorics. Pseudorandom  generators, randomness extractors, expander graphs, error-correcting codes, hash  functions.</Description><Prereqs>Exposure to randomized algorithms (as in  Computer Science 124), computational complexity (as in Computer Science 121),  and algebra (as in Applied Mathematics 106, Mathematics 123, or Computer Science  226r).</Prereqs></Course><Course><Title>[Computer Science 226r. Efficient Algorithms]</Title><Number>1749</Number><Instructor>Michael O. Rabin</Instructor><Details>Half course (fall term). Tu.,  Th., 11:30–1. EXAM GROUP: 13, 14</Details><Description>A survey of important computer  algorithms for numerical and data manipulation problems and their applications  in actual computing situations. Topics include combinatorial algorithms, string  matching, FFT and its applications, algebraic computations, randomized  algorithms in algebra number theory and geometry, maximal flows, error  correcting codes, public key cryptography, protocols for distributed systems,  and parallel algorithms.</Description><Notes>Expected to be given in 2004–05.</Notes></Course><Course><Title>[Computer Science 228. Computational Learning  Theory]</Title><Number>0364</Number><Instructor>Leslie G. Valiant</Instructor><Details>Half course (spring term). Tu., Th., 2:30–4. EXAM GROUP: 16,  17</Details><Description>Possibilities of and limitations to performing learning by  computational agents. Topics include computational models, polynomial time  learnability, learning from examples and learning from queries to oracles.  Computational limitations. Statistical limitations. Applications to Boolean  functions, automata and geometric functions. Learning algorithms for models of  neural computation.</Description><Notes>Expected to be given in 2004–05.</Notes><Prereqs>Computer Science 121 or equivalent.</Prereqs></Course><Course><Title>Computer Science  232. Introduction to Computational Molecular Biology</Title><Number>9480</Number><Instructor>Nir Friedman (Hebrew University of Jerusalem)</Instructor><Details>Half course (fall term). Tu., Th., 10–11:30. EXAM GROUP: 12,  13</Details><Description>Computational methods in molecular biology research. Emphasis on  modeling and algorithmic aspects for computational tasks posed by recent genomic  data. Sequence models, alignment, sequence motifs, protein families,  phylogenetic inference, gene expression analysis, clustering, regulation  networks.</Description><Prereqs>Computer Science 121, 124, and 181, or  approval of the instructor. Background in biology, especially molecular biology  of the cell, is useful but not required.</Prereqs></Course><Course><Title>Computer Science  244r. Advanced Networks Design Projects</Title><Number>3018</Number><Instructor>H. T. Kung and Marco Iansiti (Business School)</Instructor><Details>Half course  (spring term). M., W., 2:30–4. EXAM GROUP: 7, 8</Details><Description>The contents and course  requirements are similar to those of Computer Science 144r, with the exception  that students enrolled in Computer Science 244r are expected to do substantial  implementation of a subsystem related to their business plan. In addition,  demonstration and documentation of the implementation are required.</Description><Notes>Preference given to upper-class undergraduates or graduate students in  computer science or in business who are proficient in computer programming or in  business software. Offered jointly with the Business School as  4560.</Notes><Prereqs>Computer Science 143 or equivalent experience.</Prereqs></Course><Course><Title>*Computer Science  246. Advanced Computer Architecture</Title><Number>0979</Number><Instructor>David M. Brooks</Instructor><Details>Half course (fall term). M., W., 1–2:30. EXAM  GROUP: 6, 7</Details><Description>Discusses research papers on computer architecture with a  special focus on the impact of technology trends (power, thermal, VLSI scaling,  reliability) on high-performance computer systems. Considers traditional  superscalar as well as embedded processors. Requires a major research  project.</Description><Prereqs>Computer Science 146 or permission of the  instructor.</Prereqs></Course><Course><Title>[Computer Science 251. Advanced Systems  Programming]</Title><Number>5566</Number><Instructor>Norman Ramsey</Instructor><Details>Half course (fall term). M., W., F., 1–2:30. EXAM GROUP: 6,  7</Details><Description>Case studies of classic problems in computer systems. Students read,  understand, implement, and present each study. Develops deep understanding of  programming techniques used in systems research. Emphasizes programming,  discussion, and presentation. Cases matched to student interests.</Description><Notes>Expected to be given in 2004–05.</Notes><Prereqs>One of the  following: Computer Science 143, Computer Science 152, Computer Science 153,  Computer Science 161, or Computer Science 175.</Prereqs></Course><Course><Title>Computer Science  252r. Advanced Topics in Programming Languages</Title><Number>1986</Number><Instructor>Norman Ramsey</Instructor><Details>Half course (fall term). W., F., 2:30–4.  EXAM GROUP: 7, 8</Details><Description>Advanced functional programming. Lazy evaluation,  monads. Folds and unfolds. Combinators for parsing and prettyprinting. Modules  systems. Type systems: polymorphism and overloading, type and constructor  classes, higher-order kinds, higher-rank polymorphism, polytypic programming.  Implementation: heap profiling.</Description><Prereqs>Computer Science 152 or  permission of the instructor.</Prereqs></Course><Course><Title>[Computer Science 253r (formerly Computer Science 253). Advanced  Topics in Programming Language Compilation ]</Title><Number>2901  Enrollment: Limited to 18. Preference given to graduate students or upper-class  concentrators.</Number><Instructor>Michael D. Smith</Instructor><Details>Half course (spring term).  Tu., Th., 11:30–1. EXAM GROUP: 13, 14</Details><Description>In-depth look at virtual machine  (VM) technologies and the applications enabled by them. Special emphasis on the  techniques for replication, translation, and optimization.</Description><Notes>Expected to be given in 2004–05.</Notes><Prereqs>Computer Science  153 or equivalent.</Prereqs></Course><Course><Title>Computer Science  255. Topics in Language-Based Security</Title><Number>6216</Number><Instructor>John G. Morrisett</Instructor><Details>Half course (spring term). M., W., 2:30–4.  EXAM GROUP: 7, 8</Details><Description>Reviews research in programming language-based security  mechanisms. Topics include compiler and run-time techniques for enforcing  policies; type and proof systems for expressing policies; and static analyses  for establishing policies.</Description><Notes>Taught in seminar  style.</Notes><Prereqs>Computer Science 152, 153, 252r, 253r, or  permission of the instructor.</Prereqs></Course><Course><Title>Computer Science  261. Research Topics in Operating Systems</Title><Number>6706</Number><Instructor>Margo I. Seltzer</Instructor><Details>Half course (fall term). Tu., Th., 1–2:30.  EXAM GROUP: 15, 16</Details><Description>A quantitative approach to operating system design and  evaluation. Discussion of recent research including extensible operating system  architectures, distributed systems, and performance analysis. Overview of  research techniques and methodology.</Description><Prereqs>Computer Science  161, or equivalent.</Prereqs></Course><Course><Title>Computer Science  262. Introduction to Distributed Computing</Title><Number>7949</Number><Instructor>James H. Waldo</Instructor><Details>Half course (spring term). M., W., 4–5:30. EXAM  GROUP: 9</Details><Description>Examination of the special problems associated with distributive  computing (e.g., partial failure and lack of global knowledge) and protocols  that function in the face of these problems. Emphasis on causal ordering, event  and RPC-based systems.</Description><Prereqs>Computer Science 161 or  permission of instructor.</Prereqs></Course><Course><Title>Computer Science  263. Modern Distributed Systems</Title><Number>6846</Number><Instructor>Matthew D. Welsh</Instructor><Details>Half course (fall term). Tu., Th., 2:30–4.  EXAM GROUP: 16, 17</Details><Description>Discusses recent advances in complex distributed  systems. Topics include: peer-to-peer systems, overlay networks, Internet  services, content delivery networks, and sensor networks. Students will  undertake a significant research project and lead discussions of  readings.</Description><Prereqs>Computer Science 161 or Computer Science  143.</Prereqs></Course><Course><Title>Computer Science  264. Peer-to-Peer Systems</Title><Number>6069 Enrollment:  Limited to 24.</Number><Instructor>Mema Roussopoulos</Instructor><Details>Half course (spring term).  M., W., 1–2:30. EXAM GROUP: 6, 7</Details><Description>Discusses research papers on  peer-to-peer systems. Topics include: routing, search, caching, security,  reputation and trust, incentives, and applications. Students undertake a major  research project and lead discussions of readings.</Description><Notes>Preference to  graduate students or upper-level concentrators.</Notes><Prereqs>Computer  Science 161 or Computer Science 143.</Prereqs></Course><Course><Title>[Computer Science 265. Database Systems]</Title><Number>4104</Number><Instructor>Margo I. Seltzer</Instructor><Details>Half course (fall term). Tu., Th.,  1–2:30. EXAM GROUP: 15, 16</Details><Description>A research-oriented introduction to Database  Management systems. First third covers database design, implementation, and use.  Topics include: network, relational, and object oriented database models, system  architectures, transaction processing, system implementation, and SQL. Remaining  two-thirds address research literature surrounding database systems, including  an historical perspective, the emergence of relational and object-oriented  systems, concurrency control, and distributed systems. Students will be expected  to undertake a final research project.</Description><Notes>Expected to be given in  2004–05.</Notes><Prereqs>Computer Science 51.</Prereqs></Course><Course><Title>Computer Science  277. Geometric Modeling in Computer Graphics</Title><Number>3067</Number><Instructor>Craig Gotsman (Technion, Israel Institute of Science)</Instructor><Details>Half course (spring term). M., W., 2:30–4. EXAM GROUP: 7,  8</Details><Description>Advanced seminar in computer graphics focusing on geometric  representations and processing. Topics include: direct manipulation, implicit  surfaces, spline presentations, recursively subdivided surfaces, model  simplification, surface parameterization and processing, mesh generation and  motion capture processing.</Description><Prereqs>Computer Science 175.</Prereqs></Course><Course><Title>*Computer Science  278. Rendering and Image Processing in Computer Graphics</Title><Number>4883</Number><Instructor>Steven J. Gortler</Instructor><Details>Half course (spring term). M.,  W., 4–5:30. EXAM GROUP: 9</Details><Description>Advanced seminar in computer graphics focusing  on image rendering and processing. Topics include: light transport, efficient  rendering, image based rendering, texture processing, interactive image  processing, image compression and image analysis.</Description><Prereqs>Computer Science 175 and permission of instructor.</Prereqs></Course><Course><Title>Computer Science  281r. Artificial Intelligence: Reasoning and Planning  Systems</Title><Number>0707</Number><Instructor>Avrom J. Pfeffer</Instructor><Details>Half course (fall term). M., W., 1–2:30. EXAM GROUP: 6,  7</Details><Description>In-depth introduction to formalisms for knowledge representation and  techniques for reasoning and planning. Topics: formal logic-based  representations; probabilistic reasoning; nonmonotonic logics; truth-maintenance  systems; qualitative reasoning; inheritance hierarchies; computational  approaches to reasoning about actions and time, including actions of multiple  agents, nonlinear planning, plan recognition; reasoning about knowledge, belief,  and action.</Description><Prereqs>Computer Science 182 or permission of  instructor.</Prereqs></Course><Course><Title>[Computer Science 282. Probabilistic Reasoning]</Title><Number>3158</Number><Instructor>Avrom J. Pfeffer</Instructor><Details>Half course (fall term). M., W.,  1–2:30. EXAM GROUP: 6, 7</Details><Description>In-depth study of principles and techniques for  probabilistic reasoning and decision-theoretic planning. Topics include:  Bayesian networks and Markov networks; exact and approximate probabilistic  inference algorithms; learning Bayesian networks from data; temporal probability  models; integrating logic and probability; influence diagrams; Markov decision  processes; reinforcement learning.</Description><Notes>Expected to be given in  2004–05.</Notes><Prereqs>Computer Science 181 or permission of  instructor.</Prereqs></Course><Course><Title>[Computer Science 283. Computer Vision]</Title><Number>4475</Number><Instructor>----------</Instructor><Details>Half course (fall term). M., W., F., at 10.  EXAM GROUP: 3</Details><Description>Vision as an ill-posed inverse problem: two-dimensional  signal processing; image enhancement and restoration; feature analysis; image  segmentation and analysis; structure from motion, texture, and shading;  binocular stereo; pattern classification; and applications.</Description><Notes>Expected to be given in 2004–05.</Notes></Course><Course><Title>[Computer Science 285. Multi-agent Planning  Systems]</Title><Number>1060</Number><Instructor>Barbara J. Grosz</Instructor><Details>Half course (spring term). Tu., Th., 2:30–4. EXAM GROUP: 16,  17</Details><Description>Theories and techniques for multi-agent planning, including formal  models of rational agents, collaborative plans, and social systems;  computational approaches to distributed planning and problem solving,  negotiation, and decision theory for planning; collaborative systems  design.</Description><Notes>Expected to be given in 2004–05.</Notes><Prereqs>Computer Science 181 or 182, or permission of instructor.</Prereqs></Course><Course><Title>Computer Science  286r. Topics at the Interface between Computer Science and  Economics</Title><Number>1099 Enrollment: Limited to 20.  Preference given to graduate students or upper-class concentrators.</Number><Instructor>David  C. Parkes</Instructor><Details>Half course (spring term). Tu., Th., 11:30–1. EXAM GROUP:  13, 14</Details><Description>Interplay between computation and incentives within open  decentralized computational systems. Mechanisms and market design, negotiation,  social-choice, information-economics and privacy. Readings from theoretical CS,  AI, operations research, and economics. Seminar style. Spring 2004:  Combinatorial exchanges.</Description><Prereqs>Mathematics 21b, Applied  Mathematics 21b, or equivalent; Computer Science 121, 124, and 181 or 182, or  equivalents; or permission of instructor.</Prereqs></Course><Course><Title>[*Computer Science 287r. Natural Language  Processing]</Title><Number>3306</Number><Instructor>Stuart M. Shieber</Instructor><Details>Half course (spring term). Hours to be arranged.</Details><Description>Principles  and techniques of natural language processing, including grammar formalisms,  syntactic analysis, semantic interpretation, and associated  algorithms.</Description><Notes>Expected to be given in 2004–05.</Notes><Prereqs>Computer Science 121 and 152.</Prereqs></Course><Course><Title>[Computer Science 288. Computational Models of  Discourse]</Title><Number>1392</Number><Instructor>Barbara J. Grosz</Instructor><Details>Half course (spring term). Tu., Th., 2:30–4. EXAM GROUP: 16,  17</Details><Description>Computational theories of discourse (text and dialogue) structure and  processing. Topics include: anaphora, focusing, plans and speech acts, plan  recognition algorithms, models of collaborative planning, intonation. Discussion  of dialogue and text understanding systems. Application to the design of  human-computer interface systems.</Description><Notes>Expected to be given in  2005–06.</Notes><Prereqs>Computer Science 182 or 287r or equivalent, or  permission of instructor.</Prereqs></Course><Course><Title>Computer Science  299r. Special Topics in Computer Science</Title><Number>4592</Number><Instructor>Margo I. Seltzer</Instructor><Details>Half course (fall term; repeated spring  term). Hours to be arranged.</Details><Description>Supervision of experimental or theoretical  research on acceptable computer science problems and supervision of reading on  topics not covered by regular courses of instruction.</Description><Notes>Open to  graduate students and AB/SM candidates only. Students must arrange such work  with a member of the Division. This course is graded and is ordinarily taken  with the approval of the Committee on Higher Degrees. Applicants must file a  project sheet before study cards are filed. Project sheets may be obtained from  the Academic Office, Pierce Hall 110.</Notes></Course> </harvard>